#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#define MAXTOKENS       250
#include <libxml/xmlmemory.h>
#include <libxml/parser.h>
#include <libxml/tree.h>
#include <time.h>
#include "structures.h"
#include "RelMDD.h"
static int len_list;
char *trim(char *s);
char **split(char *string);

xmlChar *relXmlGetComments(xmlDocPtr doc, xmlNodePtr cur);
//void relXmlDisplayComments(xmlDocPtr doc, xmlNodePtr root);
xmlChar *relXmlGetListObject(xmlDocPtr doc, xmlNodePtr cur);
relationPtr relxmlReadrelations(xmlNode * root, xmlDocPtr doc);
char **relXmlGetSourceRelation(xmlChar * pt, int i);
char **relXmlGetTargetRelation(xmlChar * pt, int i);
char **relXmlGetNumberRelation(xmlChar * pt, int i);
identityPtr relxmlReadIdentity(xmlNode * root, xmlDocPtr doc);
char **relXmlGetObjectIdentity(xmlChar * pt, int i);
double *relXmlGetRelationIdentity(xmlChar * pt, int i);
topPtr relxmlReadTop(xmlNode * root, xmlDocPtr doc);
bottomPtr relxmlReadBottom(xmlNode * root, xmlDocPtr doc);



xmlChar *relXmlGetTopSource(xmlChar * pt, int i);
xmlChar *relXmlGetTopTarget(xmlChar * pt, int i);
xmlChar *relXmlGetTopRelation(xmlChar * pt, int i);

unionsPtr relxmlReadUnion(xmlNode * root, xmlDocPtr doc);
char **relXmlGetSource(xmlChar * pt, int i);
char **relXmlGetTarget(xmlChar * pt, int i);

intersectionPtr relxmlReadIntersection(xmlNode * root, xmlDocPtr doc);

compoUnionPtr relxmlReadCompostion_Union(xmlNode * root, xmlDocPtr doc);

compoInterPtr relxmlReadCompostion_Inter(xmlNode * root, xmlDocPtr doc);

conversePtr relxmlReadTransposition(xmlNode * root, xmlDocPtr doc);

complementPtr relxmlReadComplement(xmlNode * root, xmlDocPtr doc);
complementPtr main1();
intersectionPtr main11();
unionsPtr main111();
xmlDocPtr getdoc();

double *readString(unsigned char *s);

//This function reads the comments from the comments tag and  return it ..
xmlChar *relXmlGetComments(xmlDocPtr doc, xmlNodePtr cur)
{

    xmlChar *comments;


    cur = cur->xmlChildrenNode;
    while (cur != NULL) {
	if ((!xmlStrcmp(cur->name, (const xmlChar *) "comment"))) {

	    comments = xmlNodeListGetString(doc, cur->xmlChildrenNode, 1);
	    printf("The comments on this basis file:\n%s ", comments);

	}
	cur = cur->next;

    }

    return (comments);
}





//this fucntion returns the string objects from the xmlfile A,B,C.. unformated
xmlChar *relXmlGetListObject(xmlDocPtr doc, xmlNodePtr cur)
{

    xmlChar *object;


    cur = cur->xmlChildrenNode;
    while (cur != NULL) {
	if ((!xmlStrcmp(cur->name, (const xmlChar *) "objects"))) {

	    object = xmlNodeListGetString(doc, cur->xmlChildrenNode, 1);

	}
	cur = cur->next;

    }

    return (object);
}

// this functions displays the list of objects from the object tag.
void relXmlReturnObjects(xmlDocPtr doc, xmlNodePtr root)
{
    root = root->xmlChildrenNode;
    xmlChar *string;
    char **tokens = NULL;
    while (root != NULL) {
	if ((!xmlStrcmp(root->name, (const xmlChar *) "relation"))) {
	    string = relXmlGetListObject(doc, root);

	    printf("list of objects from the object in basis file %s\n",
		   string);
	    tokens = split(string);
	}

	root = root->next;
    }

    int i = 0;

    for (i = 0; tokens[i] != NULL; i++)

	printf("%02dobjects broken into token: %s\n", i, tokens[i]);

    for (i = 0; tokens[i] != NULL; i++)
	free(tokens[i]);

    free(tokens);

}



/*split string into tokens, return token array /it serve as tokenizer */
char **split(char *string)
{

    char *delim = ".,:;`'\"+-_(){}[]<>*&^%$#@!?~/|\\= \t\r\n";
    char **tokens = NULL;
    char *working = NULL;
    char *token = NULL;
    int idx = 0;
    int len = strlen(string) + 1;

    tokens = malloc(sizeof(char *) * len);
    if (tokens == NULL)
	return NULL;
    working = malloc(sizeof(char) * strlen(string) + 1);
    if (working == NULL)
	return NULL;

    /* to make sure, copy string to a safe place */
    strcpy(working, string);
    for (idx = 0; idx < len; idx++)
	tokens[idx] = NULL;

    token = strtok(working, delim);
    idx = 0;

    /* always keep the last entry NULL termindated */
    while ((idx < (len - 1)) && (token != NULL)) {
	tokens[idx] = malloc(sizeof(char) * strlen(token) + 1);
	if (tokens[idx] != NULL) {
	    strcpy(tokens[idx], token);
	    idx++;
	    token = strtok(NULL, delim);
	}
    }

    free(working);
    return tokens;
}



relationPtr relxmlReadrelations(xmlNode * root, xmlDocPtr doc)
{

    xmlNode *cur_node, *child_node;
    xmlChar *content_union;
    xmlChar *sourceAtrr, *targetAtrr, *numberAtrr;
    xmlNsPtr ns;
    xmlNodePtr cur;
    int i;
    relationPtr ret;
    ret = (relationPtr) malloc(sizeof(relationPtr));

    char **token = NULL;


    ret->number = (int *) malloc(sizeof(int) * 10);
    ret->source = (char **) malloc(sizeof(char));
    ret->target = (char **) malloc(sizeof(char));
    for (cur_node = root->children; cur_node != NULL;
	 cur_node = cur_node->next) {

	if (cur_node->type == XML_ELEMENT_NODE &&
	    !xmlStrcmp(cur_node->name, (const xmlChar *) "relation")) {

	    for (child_node = cur_node->children, i = 0;
		 child_node != NULL; child_node = child_node->next) {

		if (cur_node->type == XML_ELEMENT_NODE &&
		    !xmlStrcmp(child_node->name,
			       (const xmlChar *) "relations")) {

		    //get the source attribute
		    sourceAtrr =
			xmlGetProp(child_node, (const xmlChar *) "source");
		    if (sourceAtrr) {

			ret->source[i] = sourceAtrr;
		    }
		    // get the target attributeprop = xmlGetNsProp(cur, ("name"), NULL);
		    targetAtrr =
			xmlGetProp(child_node, (const xmlChar *) "target");
		    if (targetAtrr) {

			ret->target[i] = sourceAtrr;
		    }
		    numberAtrr =
			xmlGetProp(child_node, (const xmlChar *) "number");
		    if (numberAtrr) {

			ret->number[i] = atoi(numberAtrr);



		    }
		    i++;



		}


	    }

	}
    }
//xmlCleanupParser();
    return ret;
}


//returns list of number of relatinos from the relations tag , you must free the return value after use:
char **relXmlGetNumberRelation(xmlChar * pt, int i)
{
    char **number;
    number = split(pt);

    for (i = 0; number[i] != NULL; i++)

	printf("number %s\n", number[i]);

    return number;
}

static char *pt[10];
// to get the identity relation
identityPtr relxmlReadIdentity(xmlNode * root, xmlDocPtr doc)
{

    xmlNode *cur_node, *child_node;
    xmlChar *content_union;
    xmlChar *sourceAtrr, *targetAtrr, *numberAtrr;
    xmlNsPtr ns;
    xmlNodePtr cur;
    int i;
    char **pp;
    char *name;

    identityPtr ret;
    ret = (identityPtr) malloc(sizeof(identity) * 10);

    char **token = NULL;

// token= (char**)malloc(sizeof(char)*10);
    ret->rel = (double *) malloc(sizeof(double) * 10);
    ret->object = (char **) malloc(sizeof(char));
    int k = 0;
    for (cur_node = root->children; cur_node != NULL;
	 cur_node = cur_node->next) {

	if (cur_node->type == XML_ELEMENT_NODE &&
	    !xmlStrcmp(cur_node->name, (const xmlChar *) "relation")) {

	    for (child_node = cur_node->children, i = 0;
		 child_node != NULL; child_node = child_node->next) {

		if (cur_node->type == XML_ELEMENT_NODE &&
		    !xmlStrcmp(child_node->name,
			       (const xmlChar *) "identity")) {

		    //get the object attribute
		    sourceAtrr =
			xmlGetProp(child_node, (const xmlChar *) "object");
		    if (sourceAtrr) {

			// relXmlGetUnionSource(sourceAtrr,i);
			//  pt[i] = sourceAtrr;
			//  token[i] = sourceAtrr;
			ret[i].object = relXmlGetSource(sourceAtrr, i);
			ret->len = i + 1;
			//  printf("in%s\n", pt[i]);
		    }
		    // get the relations attribute of the identity.
		    targetAtrr =
			xmlGetProp(child_node,
				   (const xmlChar *) "relation");
		    if (targetAtrr) {
			ret->rel[i] = atof(targetAtrr);

		    }
		    xmlFree(sourceAtrr);
		    xmlFree(targetAtrr);
		    i++;
		}


	    }

	}
    }
    int j;
    // for(j = 0; j<ret->len; j++)

//printf("ok \t%s\n",*ret[j].object);
    return ret;
}


//get the object attribute of

char **relXmlGetSource(xmlChar * pt, int i)
{
    char **tokens;
    tokens = split(pt);
    return tokens;
}


// read the bottom relation or tranverse the bottom relations
bottomPtr relxmlReadBottom(xmlNode * root, xmlDocPtr doc)
{
    int the;
    xmlNode *cur_node, *child_node;
    xmlChar *content_union;
    xmlChar *sourceAtrr, *targetAtrr, *numberAtrr;
    xmlNsPtr ns;
    xmlNodePtr cur;
    int i;
    bottomPtr ret;
    ret = (bottomPtr) malloc(sizeof(bottom) * 10);
    ret->rel = (double *) malloc(sizeof(double) * 10);
    ret->source = (char **) malloc(sizeof(char));
    ret->target = (char **) malloc(sizeof(char));
    for (cur_node = root->children; cur_node != NULL;
	 cur_node = cur_node->next) {

	if (cur_node->type == XML_ELEMENT_NODE &&
	    !xmlStrcmp(cur_node->name, (const xmlChar *) "relation")) {

	    for (child_node = cur_node->children, i = 0;
		 child_node != NULL; child_node = child_node->next) {

		if (cur_node->type == XML_ELEMENT_NODE &&
		    !xmlStrcmp(child_node->name,
			       (const xmlChar *) "bottom")) {

		    //get the object attribute
		    sourceAtrr =
			xmlGetProp(child_node, (const xmlChar *) "source");
		    if (sourceAtrr) {
			ret[i].source = relXmlGetSource(sourceAtrr, i);
			// ret->source[i] =sourceAtrr;    
		    }
		    // get the relations attribute of the identity.
		    targetAtrr =
			xmlGetProp(child_node, (const xmlChar *) "target");
		    if (targetAtrr) {
			//relXmlGetBottomTarget(targetAtrr,i);
			//ret->target[i] =targetAtrr;  
			ret[i].target = relXmlGetSource(targetAtrr, i);
		    }

		    numberAtrr =
			xmlGetProp(child_node,
				   (const xmlChar *) "relation");
		    if (numberAtrr) {
			ret->rel[i] = atof(numberAtrr);
			ret->len = i + 1;
		    }



		    xmlFree(sourceAtrr);
		    xmlFree(targetAtrr);
		    xmlFree(numberAtrr);
		    i++;

		}

	    }

	}

    }


    int j;
    for (j = 0; j < ret->len; j++)

	printf("bottom \t%s\t%s\t %f\n", *ret[j].source, *ret[j].target,
	       ret->rel[j]);

    return ret;
}


// read the top relation or tranverse the top relations
topPtr relxmlReadTop(xmlNode * root, xmlDocPtr doc)
{

    xmlNode *cur_node, *child_node;
    xmlChar *content_union;
    xmlChar *sourceAtrr, *targetAtrr, *numberAtrr;
    xmlNsPtr ns;
    xmlNodePtr cur;
    int i;
    topPtr ret;
    ret = (topPtr) malloc(sizeof(top) * 100);
    ret->rel = (double *) malloc(sizeof(double) * 100);
    ret->source = (char **) malloc(sizeof(char));
    ret->target = (char **) malloc(sizeof(char));
    for (cur_node = root->children; cur_node != NULL;
	 cur_node = cur_node->next) {

	if (cur_node->type == XML_ELEMENT_NODE &&
	    !xmlStrcmp(cur_node->name, (const xmlChar *) "relation")) {

	    for (child_node = cur_node->children, i = 0;
		 child_node != NULL; child_node = child_node->next) {

		if (cur_node->type == XML_ELEMENT_NODE &&
		    !xmlStrcmp(child_node->name, (const xmlChar *) "top"))
		{

		    //get the object attribute
		    sourceAtrr =
			xmlGetProp(child_node, (const xmlChar *) "source");
		    if (sourceAtrr) {

			//ret->source[i] =sourceAtrr;    
			ret[i].source = relXmlGetSource(sourceAtrr, i);
		    }
		    // get the relations attribute of the identity.
		    targetAtrr =
			xmlGetProp(child_node, (const xmlChar *) "target");
		    if (targetAtrr) {
			ret[i].target = relXmlGetSource(targetAtrr, i);
			//ret->target[i] =targetAtrr;         
		    }
		    numberAtrr =
			xmlGetProp(child_node,
				   (const xmlChar *) "relation");
		    if (numberAtrr) {

			ret->rel[i] = atof(numberAtrr);
			ret->len = i + 1;
		    }



		    xmlFree(sourceAtrr);
		    xmlFree(targetAtrr);
		    xmlFree(numberAtrr);

		    i++;






		}

	    }

	}
    }
    int j;
    // for(j = 0; j<ret->len; j++)

//printf("bottom \t%s\t%s\t %f\n",*ret[j].source,*ret[j].target,ret->rel[j]);


    return ret;
}

//This functions returns the union data from the xml file ....
unionsPtr relxmlReadUnion(xmlNode * root, xmlDocPtr doc)
{

    xmlNode *cur_node, *child_node;
    xmlChar *content_union;
    xmlChar *sourceAtrr, *targetAtrr;
    xmlNsPtr ns;
    unsigned char *ptr[20];
    unsigned char *sourptr[20];
    static unsigned char *targptt[20];
    //static basis ret[100];
    unions *ret = NULL;
    ret = (unions *) malloc(sizeof(unions) * 100);
    ret->content = (double *) malloc(sizeof(double) * 1000);
    ret->len_Content = (int *) malloc(sizeof(int) * 100);
    ret->source = (char **) malloc(sizeof(char));
    ret->target = (char **) malloc(sizeof(char));
    // basis *ret = (basis*) calloc(40,sizeof(basis));
    if (ret == NULL) {
	/* Memory could not be allocated, so print an error and exit. */
	fprintf(stderr, "Couldn't allocate memory\n");
	exit(EXIT_FAILURE);
    }
    xmlNodePtr cur;
    int i;
    int myLength;
    for (cur_node = root->children; cur_node != NULL;
	 cur_node = cur_node->next) {



	if (cur_node->type == XML_ELEMENT_NODE &&
	    !xmlStrcmp(cur_node->name, (const xmlChar *) "relation")) {



	    for (child_node = cur_node->children, i = 0;
		 child_node != NULL; child_node = child_node->next) {

		if (cur_node->type == XML_ELEMENT_NODE &&
		    !xmlStrcmp(child_node->name,
			       (const xmlChar *) "union")) {

		    //get the source attribute
		    sourceAtrr =
			xmlGetProp(child_node, (const xmlChar *) "source");
		    if (sourceAtrr) {
			ret[i].source = relXmlGetSource(sourceAtrr, i);
		    }
		    // get the target attributeprop = xmlGetNsProp(cur, ("name"), NULL);
		    targetAtrr =
			xmlGetProp(child_node, (const xmlChar *) "target");
		    if (targetAtrr) {
			ret[i].target = relXmlGetTarget(targetAtrr, i);
			ret->len = i + 1;
		    }
		    content_union = xmlNodeGetContent(child_node);

		    if (content_union) {


			ret[i].content =
			    readString(xmlNodeListGetString
				       (doc, child_node->xmlChildrenNode,
					1));

			ret->len_Content[i] = len_list;
			//printf("cfvffd....%d\n..............................................dfdfd",  ret->len_Content[i] );
			len_list = 0;
			i++;
		    }

		    xmlFree(sourceAtrr);
		    xmlFree(targetAtrr);
		    xmlFree(content_union);

		}


	    }

	}
    }

    /*int k,kk;

       for(kk=0;kk<ret->len;kk++){
       printf("\nstarting union here so please be read thank you God\n ");

       printf("  %s || \t%s \n\t..%d..", *ret[kk].source, *ret[kk].target,  ret->len_Content[kk]);
       for(k=0;k<ret->len_Content[kk];k++)
       printf("  %f\n", ret[kk].content[k]);} */

    xmlCleanupParser();


    return ret;
}






char **relXmlGetTarget(xmlChar * pt, int i)
{
    char **tokens;
    tokens = split(pt);
    return tokens;
}

intersectionPtr relxmlReadIntersection(xmlNode * root, xmlDocPtr doc)
{

    xmlNode *cur_node, *child_node;
    xmlChar *content_union;
    xmlChar *sourceAtrr, *targetAtrr;
    xmlNsPtr ns;
    unsigned char *ptr[20];
    unsigned char *sourptr[20];
    static unsigned char *targptt[20];
    intersection *ret = NULL;
    ret = (intersection *) malloc(sizeof(intersection) * 100);
    if (ret == NULL) {
	/* Memory could not be allocated, so print an error and exit. */
	fprintf(stderr, "Couldn't allocate memory\n");
	exit(EXIT_FAILURE);
    }
    ret->content = (double *) malloc(sizeof(double) * 1000);
    ret->len_Content = (int *) malloc(sizeof(int) * 100);
    ret->source = (char **) malloc(sizeof(char));
    ret->target = (char **) malloc(sizeof(char));
    xmlNodePtr cur;
    int i;
    for (cur_node = root->children; cur_node != NULL;
	 cur_node = cur_node->next) {



	if (cur_node->type == XML_ELEMENT_NODE &&
	    !xmlStrcmp(cur_node->name, (const xmlChar *) "relation")) {



	    for (child_node = cur_node->children, i = 0;
		 child_node != NULL; child_node = child_node->next) {

		if (cur_node->type == XML_ELEMENT_NODE &&
		    !xmlStrcmp(child_node->name,
			       (const xmlChar *) "intersection")) {

		    //get the source attribute
		    sourceAtrr =
			xmlGetProp(child_node, (const xmlChar *) "source");
		    if (sourceAtrr) {
			ret[i].source = relXmlGetSource(sourceAtrr, i);
		    }
		    // get the target attributeprop = xmlGetNsProp(cur, ("name"), NULL);
		    targetAtrr =
			xmlGetProp(child_node, (const xmlChar *) "target");
		    if (targetAtrr) {
			ret[i].target = relXmlGetTarget(targetAtrr, i);
			ret->len = i + 1;
		    }
		    content_union = xmlNodeGetContent(child_node);

		    if (content_union) {


			ret[i].content =
			    readString(xmlNodeListGetString
				       (doc, child_node->xmlChildrenNode,
					1));

			ret->len_Content[i] = len_list;
			//printf("cfvffd....%d\n..............................................dfdfd",  ret->len_Content[i] );
			len_list = 0;
			i++;

		    }

		    xmlFree(sourceAtrr);
		    xmlFree(targetAtrr);
		    xmlFree(content_union);

		}


	    }

	}
    }
    /* int k,kk;
       printf("\n.................intersection ...................................\n ");

       for(kk=0;kk<ret->len;kk++){

       printf("  %s || \t%s \n", *ret[kk].source, *ret[kk].target );
       for(k=0;k<ret->len_Content[kk];k++)
       printf("  %f\n", ret[kk].content[k] );} */
    xmlCleanupParser();


    return ret;
}






compoUnionPtr relxmlReadCompostion_Union(xmlNode * root, xmlDocPtr doc)
{

    xmlNode *cur_node, *child_node;
    xmlChar *content_union;
    xmlChar *sourceAtrr, *targetAtrr;
    xmlNsPtr ns;
    unsigned char *ptr[20];
    unsigned char *sourptr[20];
    static unsigned char *targptt[20];
    compoUnion *ret = NULL;
    ret = (compoUnion *) malloc(sizeof(compoUnion) * 10);
    if (ret == NULL) {
	/* Memory could not be allocated, so print an error and exit. */
	fprintf(stderr, "Couldn't allocate memory\n");
	exit(EXIT_FAILURE);
    }
    ret->content = (double *) malloc(sizeof(double) * 1000);
    ret->len_Content = (int *) malloc(sizeof(int) * 100);
    ret->source = (char **) malloc(sizeof(char));
    ret->target = (char **) malloc(sizeof(char));
    xmlNodePtr cur;
    int i;
    for (cur_node = root->children; cur_node != NULL;
	 cur_node = cur_node->next) {



	if (cur_node->type == XML_ELEMENT_NODE &&
	    !xmlStrcmp(cur_node->name, (const xmlChar *) "relation")) {



	    for (child_node = cur_node->children, i = 0;
		 child_node != NULL; child_node = child_node->next) {

		if (cur_node->type == XML_ELEMENT_NODE &&
		    !xmlStrcmp(child_node->name,
			       (const xmlChar *) "composition_Union")) {

		    //get the source attribute
		    sourceAtrr =
			xmlGetProp(child_node, (const xmlChar *) "source");
		    if (sourceAtrr) {
			ret[i].source = relXmlGetSource(sourceAtrr, i);
		    }
		    // get the target attributeprop = xmlGetNsProp(cur, ("name"), NULL);
		    targetAtrr =
			xmlGetProp(child_node, (const xmlChar *) "target");
		    if (targetAtrr) {
			ret[i].target = relXmlGetTarget(targetAtrr, i);

		    }
		    content_union = xmlNodeGetContent(child_node);

		    if (content_union) {

			ret[i].content =
			    readString(xmlNodeListGetString
				       (doc, child_node->xmlChildrenNode,
					1));




			ret->len_Content[i] = len_list;
			//printf("cfvffd....%d\n..............................................dfdfd",  ret->len_Content[i] );
			len_list = 0;
			i++;
		    }

		    xmlFree(sourceAtrr);
		    xmlFree(targetAtrr);
		    xmlFree(content_union);

		}


	    }

	}
    }
    xmlCleanupParser();


    return ret;
}









compoInterPtr relxmlReadCompostion_Inter(xmlNode * root, xmlDocPtr doc)
{

    xmlNode *cur_node, *child_node;
    xmlChar *content_union;
    xmlChar *sourceAtrr, *targetAtrr;
    xmlNsPtr ns;
    unsigned char *ptr[20];
    unsigned char *sourptr[20];
    static unsigned char *targptt[20];
    compoInter *ret = NULL;
    ret = (compoInter *) malloc(sizeof(compoInter) * 10);
    if (ret == NULL) {
	/* Memory could not be allocated, so print an error and exit. */
	fprintf(stderr, "Couldn't allocate memory\n");
	exit(EXIT_FAILURE);
    }
    ret->content = (double *) malloc(sizeof(double) * 1000);
    ret->len_Content = (int *) malloc(sizeof(int) * 100);
    ret->source = (char **) malloc(sizeof(char));
    ret->target = (char **) malloc(sizeof(char));
    xmlNodePtr cur;
    int i;
    for (cur_node = root->children; cur_node != NULL;
	 cur_node = cur_node->next) {



	if (cur_node->type == XML_ELEMENT_NODE &&
	    !xmlStrcmp(cur_node->name, (const xmlChar *) "relation")) {



	    for (child_node = cur_node->children, i = 0;
		 child_node != NULL; child_node = child_node->next) {

		if (cur_node->type == XML_ELEMENT_NODE &&
		    !xmlStrcmp(child_node->name, (const xmlChar *)
			       "composition_Intersection")) {

		    //get the source attribute
		    sourceAtrr =
			xmlGetProp(child_node, (const xmlChar *) "source");
		    if (sourceAtrr) {
			ret[i].source = relXmlGetSource(sourceAtrr, i);
		    }
		    // get the target attributeprop = xmlGetNsProp(cur, ("name"), NULL);
		    targetAtrr =
			xmlGetProp(child_node, (const xmlChar *) "target");
		    if (targetAtrr) {
			ret[i].target = relXmlGetTarget(targetAtrr, i);
			ret->len = i + 1;
		    }
		    content_union = xmlNodeGetContent(child_node);

		    if (content_union) {


			ret[i].content =
			    readString(xmlNodeListGetString
				       (doc, child_node->xmlChildrenNode,
					1));


			ret->len_Content[i] = len_list;
			//printf("cfvffd....%d\n..............................................dfdfd",  ret->len_Content[i] );
			len_list = 0;
			i++;
		    }

		    xmlFree(sourceAtrr);
		    xmlFree(targetAtrr);
		    xmlFree(content_union);

		}


	    }

	}
    }

    xmlCleanupParser();


    return ret;
}







conversePtr relxmlReadTransposition(xmlNode * root, xmlDocPtr doc)
{

    xmlNode *cur_node, *child_node;
    xmlChar *content_union;
    xmlChar *sourceAtrr, *targetAtrr;
    xmlNsPtr ns;
    unsigned char *ptr[20];
    unsigned char *sourptr[20];
    static unsigned char *targptt[20];
    converse *ret = NULL;
    ret = (converse *) malloc(sizeof(converse) * 10);
    if (ret == NULL) {
	/* Memory could not be allocated, so print an error and exit. */
	fprintf(stderr, "Couldn't allocate memory\n");
	exit(EXIT_FAILURE);
    }

    ret->content = (double *) malloc(sizeof(double) * 1000);
    ret->len_Content = (int *) malloc(sizeof(int) * 100);
    ret->source = (char **) malloc(sizeof(char));
    ret->target = (char **) malloc(sizeof(char));
    xmlNodePtr cur;
    int i;
    for (cur_node = root->children; cur_node != NULL;
	 cur_node = cur_node->next) {



	if (cur_node->type == XML_ELEMENT_NODE &&
	    !xmlStrcmp(cur_node->name, (const xmlChar *) "relation")) {



	    for (child_node = cur_node->children, i = 0;
		 child_node != NULL; child_node = child_node->next) {

		if (cur_node->type == XML_ELEMENT_NODE &&
		    !xmlStrcmp(child_node->name,
			       (const xmlChar *) "transposition")) {

		    //get the source attribute
		    sourceAtrr =
			xmlGetProp(child_node, (const xmlChar *) "source");
		    if (sourceAtrr) {
			ret[i].source = relXmlGetSource(sourceAtrr, i);
		    }
		    // get the target attributeprop = xmlGetNsProp(cur, ("name"), NULL);
		    targetAtrr =
			xmlGetProp(child_node, (const xmlChar *) "target");
		    if (targetAtrr) {
			ret[i].target = relXmlGetTarget(targetAtrr, i);
			ret->len = i + 1;

		    }
		    content_union = xmlNodeGetContent(child_node);

		    if (content_union) {


			ret[i].content =
			    readString(xmlNodeListGetString
				       (doc, child_node->xmlChildrenNode,
					1));


			ret->len_Content[i] = len_list;
			//printf("cfvffd....%d\n..............................................dfdfd",  ret->len_Content[i] );
			len_list = 0;
			i++;
		    }

		    xmlFree(sourceAtrr);
		    xmlFree(targetAtrr);
		    xmlFree(content_union);

		}


	    }

	}
    }

    xmlCleanupParser();


    return ret;
}






complementPtr relxmlReadComplement(xmlNode * root, xmlDocPtr doc)
{

    xmlNode *cur_node, *child_node;
    xmlChar *content_union;
    xmlChar *sourceAtrr, *targetAtrr;
    xmlNsPtr ns;
    unsigned char *ptr[20];
    unsigned char *sourptr[20];
    static unsigned char *targptt[20];
    complement *ret = NULL;
    ret = (complement *) malloc(sizeof(complement) * 10);
    if (ret == NULL) {
	/* Memory could not be allocated, so print an error and exit. */
	fprintf(stderr, "Couldn't allocate memory\n");
	exit(EXIT_FAILURE);
    }
    ret->content = (double *) malloc(sizeof(double) * 1000);
    ret->len_Content = (int *) malloc(sizeof(int) * 100);
    ret->source = (char **) malloc(sizeof(char));
    ret->target = (char **) malloc(sizeof(char));
    xmlNodePtr cur;
    int i;
    for (cur_node = root->children; cur_node != NULL;
	 cur_node = cur_node->next) {



	if (cur_node->type == XML_ELEMENT_NODE &&
	    !xmlStrcmp(cur_node->name, (const xmlChar *) "relation")) {



	    for (child_node = cur_node->children, i = 0;
		 child_node != NULL; child_node = child_node->next) {

		if (cur_node->type == XML_ELEMENT_NODE &&
		    !xmlStrcmp(child_node->name,
			       (const xmlChar *) "complement")) {

		    //get the source attribute
		    sourceAtrr =
			xmlGetProp(child_node, (const xmlChar *) "source");
		    if (sourceAtrr) {
			ret[i].source = relXmlGetSource(sourceAtrr, i);
		    }
		    // get the target attributeprop = xmlGetNsProp(cur, ("name"), NULL);
		    targetAtrr =
			xmlGetProp(child_node, (const xmlChar *) "target");
		    if (targetAtrr) {
			ret[i].target = relXmlGetTarget(targetAtrr, i);
			ret->len = i + 1;

		    }
		    content_union = xmlNodeGetContent(child_node);

		    if (content_union) {


			ret[i].content =
			    readString(xmlNodeListGetString
				       (doc, child_node->xmlChildrenNode,
					1));

			ret->len_Content[i] = len_list;
			//printf("cfvffd....%d\n..............................................dfdfd",  ret->len_Content[i] );
			len_list = 0;
			i++;
		    }

		    xmlFree(sourceAtrr);
		    xmlFree(targetAtrr);
		    xmlFree(content_union);

		}


	    }

	}
    }
    /* int k,kk;

       for(kk=0;kk<ret->len;kk++){
       printf("\nstarting union here so please be read thank you God\n ");

       printf("  %s || \t%s \n\t..%d..", *ret[kk].source, *ret[kk].target,  ret->len_Content[kk]);
       for(k=0;k<ret->len_Content[kk];k++)
       printf("  %f\n", ret[kk].content[k]);} */
    xmlCleanupParser();


    return ret;
}








xmlChar *targetObjects(xmlChar * pt, int i)
{
    int k = 0;

    xmlChar *ptt[4];
    ptt[i] = pt;
//printf(" target objects%s%d \n", ptt[i],i);
    return *ptt;
}


double *readString(unsigned char *s)
{
    float num;
    int nc, i = 0;
    int nd, num1;
    int j;

    double *list = (double *) malloc((strlen(s) + 1) * sizeof(double));
//sscanf(s, "%[^]%n", &num1, &nd);

    while (sscanf(s, "%f%n", &num, &nc) == 1
	   || sscanf(s, "%*[,;]%f%n", &num, &nc) == 1) {

	s += nc;
	list[i] = (double) num;

	i++;
    }
    //printf("the leng in fuction%d",i);
//for(j=0;j<i;j++)
    //printf("\n%f\n", list[j]);
    //printf("new list%d",i);
    len_list = i;
    //printf("....%d\n..............................................", i);
    return list;
}



complementPtr main1()
{

    xmlDocPtr doc;
    doc = xmlParseFile("w3.xml");

    if (doc == NULL)
	printf("error: could not parse file file.xml\n");
    xmlNode *root;
    root = xmlDocGetRootElement(doc);



    complementPtr ret;


    // memset(ret, 0, sizeof(identityPtr));
    ret = relxmlReadComplement(root, doc);
    //int k,kk;
// printf("\n................. in main...................................\n ");

    //  for(kk=0;kk<4;kk++){

//printf("  %s || \t%s \n", ret->source[kk], ret->target[kk] );
//for(k=0;k<9;k++)
//printf("  %f\n", ret[kk].content[k] );
//}

    return ret;
}

intersectionPtr main11()
{

    xmlDocPtr doc;
    doc = xmlParseFile("w3.xml");

    if (doc == NULL)
	printf("error: could not parse file file.xml\n");
    xmlNode *root = NULL;
    root = xmlDocGetRootElement(doc);



    intersectionPtr ret;


    // memset(ret, 0, sizeof(identityPtr));
    ret = relxmlReadIntersection(root, doc);
    //int k,kk;
// printf("\n................. in main...................................\n ");

    //  for(kk=0;kk<4;kk++){

//printf("  %s || \t%s \n", ret->source[kk], ret->target[kk] );
//for(k=0;k<9;k++)
//printf("  %f\n", ret[kk].content[k] );
//}
    if (!root || !root->name || xmlStrcmp(root->name, "RelationBasis")) {
	xmlFreeDoc(doc);
	return;
    }

    return ret;
}




unionsPtr main111()
{

    xmlDocPtr doc;
    doc = xmlParseFile("w3.xml");

    if (doc == NULL)
	printf("error: could not parse file file.xml\n");
    xmlNode *root = NULL;
    root = xmlDocGetRootElement(doc);



    unionsPtr ret;


    // memset(ret, 0, sizeof(identityPtr));
    ret = relxmlReadUnion(root, doc);
    //int k,kk;
// printf("\n................. in main...................................\n ");

    //  for(kk=0;kk<4;kk++){

//printf("  %s || \t%s \n", ret->source[kk], ret->target[kk] );
//for(k=0;k<9;k++)
//printf("  %f\n", ret[kk].content[k] );
//}
    if (!root || !root->name || xmlStrcmp(root->name, "RelationBasis")) {
	xmlFreeDoc(doc);
	return;
    }

    return ret;
}

identityPtr idet()
{

    xmlDocPtr doc;
    doc = xmlParseFile("w3.xml");

    if (doc == NULL)
	printf("error: could not parse file file.xml\n");
    xmlNode *root;
    root = xmlDocGetRootElement(doc);



    identityPtr ret;


    // memset(ret, 0, sizeof(identityPtr));
    ret = relxmlReadIdentity(root, doc);
    //int k,kk;
// printf("\n................. in main...................................\n ");

    //  for(kk=0;kk<4;kk++){

//printf("  %s || \t%s \n", ret->source[kk], ret->target[kk] );
//for(k=0;k<9;k++)
//printf("  %f\n", ret[kk].content[k] );
//}

    return ret;
}


bottomPtr bott()
{

    xmlDocPtr doc;
    doc = xmlParseFile("w3.xml");

    if (doc == NULL)
	printf("error: could not parse file file.xml\n");
    xmlNode *root;
    root = xmlDocGetRootElement(doc);



    bottomPtr ret;


    // memset(ret, 0, sizeof(identityPtr));
    ret = relxmlReadBottom(root, doc);
    //int k,kk;
// printf("\n................. in main...................................\n ");

    //  for(kk=0;kk<4;kk++){

//printf("  %s || \t%s \n", ret->source[kk], ret->target[kk] );
//for(k=0;k<9;k++)
//printf("  %f\n", ret[kk].content[k] );
//}

    return ret;
}

topPtr topp()
{

    xmlDocPtr doc;
    doc = xmlParseFile("w3.xml");
    if (doc == NULL)
	printf("error: could not parse file file.xml\n");
    xmlNode *root;
    root = xmlDocGetRootElement(doc);



    topPtr ret;


    // memset(ret, 0, sizeof(identityPtr));
    ret = relxmlReadTop(root, doc);
    //int k,kk;
// printf("\n................. in main...................................\n ");

    //  for(kk=0;kk<4;kk++){

//printf("  %s || \t%s \n", ret->source[kk], ret->target[kk] );
//for(k=0;k<9;k++)
//printf("  %f\n", ret[kk].content[k] );
//}

    return ret;
}
